// קוד אסינכרוני זה פונקציות שלא ממתינות לקוד גדול שירוץ ואז יבצר מצב שיהיה דילי אז פונקציות אסינכרוניות מאפשרות להתגבר על דילי ומתי שהמחשב סיים להריץ מאחורי הקלעים רק אז הקוד הגדול יופעל 
// הבדל בין קוד סינכרוני בין קוד אסינכרוני

// קוד סינכורני - משמעותו פעולה אחת, פעם אחת בכל זמן, הפעולה הבאה לא תתחיל לפני שקודמתה תסתיים.    
// למשל: פקודה  אחת לא "תוקעת" פקודה אחרת אלא הכל מתבצע במקביל API  קוד אסינכרוני - משמעותו מספר פעולות במקביל, כמו קריאת 

 
// הדרך להתמודד עם קוד אסינכרוני  היא באמצעות פונקציות חזרה
// call backs


// פונקציה ראשונה
function getDollar(collbake) { // הפרמטר שווה ל 3.5
    setTimeout(()=>{
        collbake(3.5); // נהפך לפונקציה  collbake שער הדולר , פרמטר 
    }, 5000);  // זמן תגובה אחרי 5 שניות
}
// פונקציה שנייה
function getResultPrice(priceRes)  { // שבמקרה הזה 3.5 getDollar הוא יקבל את התוצאה של הפונקציה  priceRes הפרמטר 
    setTimeout(()=>{
        let price = 30; // מחיר של משהו
    console.log(`The result of price is ${price * priceRes}`)
    },  3000); // זמן תגובה אחרי 3 שניות
}
// קריאה לפונקציה (פונקציה בתוך פונקציה)
getDollar(getResultPrice); // לקחתי ערך מפונקציה ראשונה וחיברתי להפונקציה השנייה  getResultPrice & getDollar פה חיברתי בין הפונקציות 














// Function Callback, פונקציה חזרה

// דרך 1

// function func1(parameter) { // חייב לרשום פרמטר כדי שנוכל לכתוב אותו כפונקציה!  , זה נותן לנו יכולת לזמן בתוך פונקציה ערכים מסוימים או פונקציות או כל דבר אחר
//     console.log("hello class !!");
//     parameter(); // (פונקציה חזרה) Callback פה הפכנו את הפרמטר לפונקציה, עכשיו זה נקרא פונקציה
// };

// function func2(){
//     console.log(`You are the best.........`);
//     console.log(`The result of 5+5 is: ${5+5}`);
// };
// func1(func2);  //func1 יופיע בתוך הפונקציה func2 אז ,func2 את func1 פה ביצענו זקריאה לפונקציה, בגלל ששמנו בתוך הפרמטר של 

//////////////////////

// דרך 2
// func1 אפשר לכתוב פונקציה אנונימית ולצרוב אותה בתוך הקריאה לפונקציה של


// function func1(parameter) { 
//     console.log("hello class !!");
//     parameter();
// };

// func1(function () {  // צריבה פונקציה אנונימית
//     console.log(`You are number 1  (-|-) .........`);
//     console.log(`The result of 10+10 is: ${10+10}`);
// }); 

//////////////////////

// דרך 3
// ניתן לרשום פונקציה חץ

// function func1(parameter) { 
//     console.log("hello class !!");
//     parameter(); 
// };

// func1( ()=> {  // ()=>{}  צריבה פונקציה חץ
//     console.log(`Number 5  (-||||||||-) .........`);
//     console.log(`The result of 500+500 is: ${500+500}`);
// }); 


//////////////////////

// החזרת ערך ,return עוד משהו ששוה לזכור שאפשר לעשות עם המילה השמורה 

// function func1(a,b,parameter) { 
//     console.log("hello class !!");
//     console.log(parameter(a,b)); 
// };

// let a = 5;
// let b = 6;

// func1(a,b,(a,b)=> {return a+b});  // שימוש בפונקציה חץ

// func1(a,b,function(a,b) {return a*b}); // function שימוש במילה השמורה 







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// הבטחה - זו התחייבות לבצע פעולה מסוימת
// הבטחה יכולה להחזיר תשובה או לדחות את הבקשה
// המנגנון יבצע את הפעולות שבתוכו ולאחר השלמתן יחזיר את התוצאה
// מסיבה זו ניתן להשתמש במנגנון זה לביצוע קוד אסינכרוני



// //דוגמה return הם כמו reject  & resolve ה 

// // function do_Task1(effort_Level) { // פרמטר בשם רמת לחץ
// //     if(effort_Level > 10)
// //           return "Tesk 1 completed"; // אם הצליח 
// //     else
// //           return "Task 1 faild"  // אם נכשל
// //   }

////////////////////////////////

//                // Promise \\
//   //Promise אפשר לרשום ככה עם שימוש ב
  
//   function do_Task1(effort_Level) { // פרמטר בשם רמת לחץ
//     return new Promise((resolve, reject) => {
//     if(effort_Level > 10) // התנאי
//           resolve("Tesk 1 completed!!"); // אם הצליח 
//     else
//           reject("Task 1 faild");  // אם נכשל
//     });
//   }
  
//   let effort_Level = 15;  // פעולת השמה לפרמטר
  
//   //אנחנו רושמים סתם שם של משתנה, נזכיר שרשמנו תנאי שהפרמטר יהיה גדול מ 10 וזה יחזיר then בתוך המילה השמורה
//   //resolve אנחנו רושמים פונקציה שתרוץ במידה והצליח, 
  
//   setTimeout(()=> {
//   do_Task1(effort_Level).then((message_1) => {  // resolve שייך ל then
//       console.log(message_1);
//   })

//   .catch((message_2) => { //
//       console.log("Oh no! The promise was rejected"); // reject שייך ל catch
//         console.log(message_1);
//   });
// }, 5000 ); // לאחר 5 שניות התוצאה תופיעה
  


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//     async function func1()
// {
//     return 10;
// }
// async function func2()
// {
//     return 20;
// }
// async function func3()
// {
//     return 30;
// }
// async function f1()
// {

// }

// // וזה אומר תמתין await יש פקודה לקוד אסינכרוני להתנהג כקוד סנכרוני , לפקודה זו קורים
// // אומרת לפונקציה תרוץ כקוד סנכרוני זאת אומרת רק מתי שהפונקציה מוכנה (מאחורי הקלעים) תריץ הפונקציה await המילה 
// // async יכולה לפעול אך ורק בפונקציה אסינכרוני שזו המילה השמורה  await

// // :דוגמה
// async function main1()  // async יצירת פונקציה אסינכרוני בשימוש המילה השמורה
// {
//     let a=await func1();  // מביאה את שער הדולר func1 נגיד שהפונקציה  
//     let b=await func2();  // מביאה את שער המניה func1 נגיד שהפונקציה 
//     let c=await func3();  // מביאה את הסכום להשקעה func1 נגיד שהפונקציה 
//     let tot=a+b+c;  // חישוב
//     console.log(tot); // והצגת התוצאה
// }
// main1(); // הרצת/זימון הפונקציה


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//  היא מקבלת פרמטר ראשון איזשהו נתיב (אפשר לשלוח לו פרמטרים נוספים כגון אובייקטים...)  fetch פונקציה 
// היא פונקציה אסינכרוני במערכת Promise (אבטחה) והיא מחזריה

// async function xx(){
//     let html=await fetch('http://www.zap.co.il').then((res)=>{return res.text()});  // מחזיר איזשהו אובייקט שהוא ההחזרה התושבה  then
//     console.log(html);
// };
// xx();

// הסבר של הפעולה
// res הפונקציה הזאת היא כמובן יגיע לכאן ואז אני רוצה את מה שנשלח פונקציה חץ ואז זה מגיע לי לכאן res אז יש לו כל מיני 
// זה אובייקט של התשובה יש לו כל מיני מאפיינים ושיטות ובכן יש לו שתי פונקציות יש לו פונקציה אחת שלוקחת את התוכן שלך 
// זה הרי את body חזר התשובה סליחה והיא יכולה להחזיר לי אותו בפורמט של טקסט או בפורמט של ג'ייסון תלוי בתשובה 
// כלומר אם אני פונה לדף אינטרנט אני מצפה שהתשובה תהיה קובץ טקסט אינפורמציה של טקסט כי זה קובץ של HTML או 
// איזשהו API או איזשהו מקום שאמור להחזיר לי ג'ייסון אז אני יודע שאני לוקח את מה שמקבל פה ומעביר אותו ג'ייסון אז אני 
// אגיד לו כוח return res  טקסט זאת אומרת תבצע קריאה חזרה התשובה  היא האובייקט ותחזיר לי טקסט של מה שקבילתה 






















